// Copyright 2022 Praetorian Security, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package ntlm

import (
	"testing"

	"github.com/davecgh/go-spew/spew"
)

var (

	// SampleA was captured from a system running FireFox on MacOS authenticating to an ADFS server
	// running on Windows Server 2019 with BurpSuite proxying the requests

	NegotiateMessageBytesSampleA = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x82, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	ChallengeMessageBytesSampleA = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00,
		0x38, 0x00, 0x00, 0x00, 0x05, 0x82, 0x89, 0x02, 0xab, 0xf2, 0x49, 0xf0, 0xf1, 0xa3, 0xb6, 0xdb,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x00, 0xbe, 0x00, 0x46, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x63, 0x45, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00,
		0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00,
		0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00,
		0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00, 0x3a, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00,
		0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x05, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00,
		0x41, 0x00, 0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x61, 0x4d, 0x05, 0xbf, 0xe4, 0x72, 0xd8, 0x01,
		0x00, 0x00, 0x00, 0x00,
	}

	AuthenticateMessageBytesSampleA = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
		0x80, 0x00, 0x00, 0x00, 0xea, 0x00, 0xea, 0x00, 0x98, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x1a, 0x00,
		0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x16, 0x00, 0x16, 0x00,
		0x6a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x82, 0x08, 0x00,
		0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00,
		0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x41, 0x00, 0x43, 0x00, 0x72, 0x00,
		0x6f, 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x57, 0x00, 0x4f, 0x00, 0x52, 0x00,
		0x4b, 0x00, 0x53, 0x00, 0x54, 0x00, 0x41, 0x00, 0x54, 0x00, 0x49, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0xd6, 0x67, 0x23, 0xd0, 0xc7, 0x43, 0x55, 0x19, 0x0b, 0x00, 0xe7, 0xb9, 0x79, 0x7b, 0x63, 0x4e,
		0xca, 0x84, 0xb8, 0xf4, 0x60, 0x1e, 0x41, 0x76, 0x07, 0xad, 0xb4, 0x0c, 0xc0, 0x24, 0xda, 0xba,
		0x9c, 0xd6, 0xb6, 0x78, 0x3e, 0x0b, 0x95, 0xb6, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x80, 0x2f, 0x00, 0xbf, 0xe4, 0x72, 0xd8, 0x01, 0xe8, 0x70, 0x53, 0xc9, 0x95, 0x4d, 0x90, 0xa1,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,
		0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00,
		0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00, 0x3a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,
		0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00,
		0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00,
		0x41, 0x00, 0x4c, 0x00, 0x05, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00,
		0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x61, 0x4d, 0x05, 0xbf, 0xe4, 0x72, 0xd8, 0x01, 0x00, 0x00,
		0x00, 0x00,
	}

	// SampleB was captured from a system running on Google Chrome on MacOS authenticating to an ADFS server
	// running on Windows Server 2019 with BurpSuite proxying the requests

	NegotiateMessageBytesSampleB = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x82, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
	}

	ChallengeMessageBytesSampleB = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00,
		0x38, 0x00, 0x00, 0x00, 0x05, 0x82, 0x89, 0x02, 0x70, 0x6c, 0xb3, 0x29, 0xc0, 0xb6, 0xfe, 0x76,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x00, 0xbe, 0x00, 0x46, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x63, 0x45, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00,
		0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00,
		0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00,
		0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00, 0x3a, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00,
		0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x05, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00,
		0x41, 0x00, 0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x3f, 0x8e, 0xe3, 0x1c, 0xe3, 0x72, 0xd8, 0x01,
		0x00, 0x00, 0x00, 0x00,
	}

	AuthenticateMessageBytesSampleB = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
		0x58, 0x00, 0x00, 0x00, 0x4c, 0x01, 0x4c, 0x01, 0x70, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x1a, 0x00,
		0xbc, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x3a, 0x00, 0x3a, 0x00,
		0xe6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x05, 0x82, 0x08, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x8c, 0xc2, 0x87, 0x0f, 0xb7, 0xd4, 0xf4,
		0x86, 0xc2, 0x13, 0xf3, 0xbe, 0x8d, 0x31, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x8f, 0x28, 0x06, 0xc4, 0xa5, 0x0b, 0x2d, 0xc9, 0xec, 0x1f, 0xca, 0xce, 0x3e, 0x20, 0x6b, 0x55,
		0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x8e, 0xe3, 0x1c, 0xe3, 0x72, 0xd8, 0x01,
		0x5f, 0x27, 0x0f, 0x43, 0x1a, 0x57, 0x8f, 0x15, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0e, 0x00,
		0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00,
		0x1e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00,
		0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00,
		0x04, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00,
		0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00,
		0x3a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00,
		0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00,
		0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00,
		0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x05, 0x00, 0x1a, 0x00,
		0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00,
		0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x3f, 0x8e,
		0xe3, 0x1c, 0xe3, 0x72, 0xd8, 0x01, 0x06, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00,
		0x10, 0x00, 0x63, 0x2e, 0xc8, 0xcc, 0x4f, 0xfa, 0xd9, 0xd4, 0x9d, 0xa0, 0x63, 0xe2, 0x71, 0xa1,
		0x25, 0x9c, 0x09, 0x00, 0x3e, 0x00, 0x48, 0x00, 0x54, 0x00, 0x54, 0x00, 0x50, 0x00, 0x2f, 0x00,
		0x73, 0x00, 0x74, 0x00, 0x73, 0x00, 0x2e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00,
		0x6f, 0x00, 0x73, 0x00, 0x6f, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6f, 0x00,
		0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x2e, 0x00, 0x63, 0x00,
		0x6f, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x41, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00,
		0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x70, 0x00, 0x72, 0x00, 0x61, 0x00, 0x65, 0x00, 0x74, 0x00,
		0x6f, 0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x2d, 0x00, 0x61, 0x00, 0x73, 0x00,
		0x6d, 0x00, 0x2d, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x74, 0x00, 0x66, 0x00, 0x6f, 0x00,
		0x72, 0x00, 0x6d, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x6f, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6c, 0x00,
	}

	// SampleC was collected from a Windows 10 client running Google Chrome authenticating to an ADFS
	// server running on Windows Server 2019 with BurpSuite proxying the requests

	NegotiateMessageBytesSampleC = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x97, 0x82, 0x08, 0xe2,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x61, 0x4a, 0x00, 0x00, 0x00, 0x0f,
	}

	ChallengeMessageBytesSampleC = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00,
		0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x89, 0xe2, 0x8a, 0xbb, 0xb6, 0x84, 0x7e, 0x27, 0x76, 0xb4,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x00, 0xbe, 0x00, 0x46, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x63, 0x45, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00,
		0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00,
		0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00,
		0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00, 0x3a, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00,
		0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x05, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00,
		0x41, 0x00, 0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x89, 0x5f, 0x6d, 0x5c, 0xc8, 0x72, 0xd8, 0x01,
		0x00, 0x00, 0x00, 0x00,
	}

	AuthenticateMessageBytesSampleC = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
		0xa0, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01, 0xb8, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x1a, 0x00,
		0x58, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x72, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
		0x82, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x38, 0x02, 0x00, 0x00, 0x15, 0x82, 0x88, 0xe2,
		0x0a, 0x00, 0x61, 0x4a, 0x00, 0x00, 0x00, 0x0f, 0xa9, 0xf5, 0x3b, 0x37, 0xbf, 0xc9, 0x49, 0x75,
		0x5f, 0x21, 0xd2, 0xaf, 0x94, 0x8b, 0xdc, 0x42, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00,
		0x4c, 0x00, 0x41, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00,
		0x72, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
		0x2d, 0x00, 0x4e, 0x00, 0x49, 0x00, 0x44, 0x00, 0x34, 0x00, 0x34, 0x00, 0x35, 0x00, 0x4d, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xeb, 0x30, 0x1f, 0xab, 0x4f, 0x37, 0x4d,
		0x79, 0x59, 0x28, 0x73, 0x38, 0x51, 0x19, 0x3b, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x89, 0x5f, 0x6d, 0x5c, 0xc8, 0x72, 0xd8, 0x01, 0xc9, 0x74, 0x65, 0x45, 0xb9, 0xdd, 0xf7, 0x35,
		0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,
		0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00,
		0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00, 0x3a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,
		0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00,
		0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00,
		0x41, 0x00, 0x4c, 0x00, 0x05, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00,
		0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x89, 0x5f, 0x6d, 0x5c, 0xc8, 0x72, 0xd8, 0x01, 0x06, 0x00,
		0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x14, 0x1a, 0x38, 0x76, 0xf8, 0x9c,
		0x6e, 0x45, 0xd8, 0x92, 0xf5, 0xb4, 0x0e, 0x64, 0x2f, 0xe9, 0xca, 0x41, 0x72, 0x52, 0x24, 0xb0,
		0xd6, 0x96, 0x37, 0x81, 0xbf, 0xef, 0xd7, 0x94, 0xf5, 0xe9, 0x0a, 0x00, 0x10, 0x00, 0xe3, 0x7e,
		0x10, 0x35, 0xd8, 0x9e, 0x56, 0xb4, 0x6e, 0x3a, 0x70, 0x03, 0xc8, 0x1f, 0x54, 0x48, 0x09, 0x00,
		0x3e, 0x00, 0x48, 0x00, 0x54, 0x00, 0x54, 0x00, 0x50, 0x00, 0x2f, 0x00, 0x73, 0x00, 0x74, 0x00,
		0x73, 0x00, 0x2e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x73, 0x00,
		0x6f, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x61, 0x00,
		0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x2e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xd7, 0xa2, 0x6d, 0x26, 0xeb, 0x99, 0x27,
		0xb7, 0x53, 0x5e, 0x64, 0x5d, 0x59, 0xc7, 0x14,
	}

	// SampleD was collected from a Windows 10 system running Microsoft Edge in Internet Explorer mode
	// with Fiddler being leveraged to intercept TLS traffic sent by the client.

	NegotiateMessageBytesSampleD = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x97, 0x82, 0x08, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x61, 0x4a,
		0x00, 0x00, 0x00, 0x0,
	}

	ChallengeMessageBytesSampleD = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00,
		0x0e, 0x00, 0x0e, 0x00, 0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x89, 0xe2,
		0xe3, 0x52, 0x63, 0x2b, 0x6f, 0xae, 0xd1, 0xf5, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xbe, 0x00, 0xbe, 0x00, 0x46, 0x00, 0x00, 0x00,
		0x0a, 0x00, 0x63, 0x45, 0x00, 0x00, 0x00, 0x0f, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x02, 0x00,
		0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00,
		0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00, 0x49, 0x00,
		0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00, 0x55, 0x00,
		0x34, 0x00, 0x47, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x30, 0x00, 0x38, 0x00,
		0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00,
		0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00,
		0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00, 0x3a, 0x00,
		0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00,
		0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00, 0x4f, 0x00,
		0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00,
		0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x05, 0x00,
		0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00,
		0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00,
		0x41, 0x00, 0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x8b, 0x91, 0x85, 0xe8,
		0xf7, 0x72, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00,
	}

	AuthenticateMessageBytesSampleD = []byte{
		0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00,
		0x18, 0x00, 0x18, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x80, 0x01, 0x80, 0x01,
		0xb8, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x1a, 0x00, 0x58, 0x00, 0x00, 0x00,
		0x10, 0x00, 0x10, 0x00, 0x72, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
		0x82, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x38, 0x02, 0x00, 0x00,
		0x15, 0x82, 0x88, 0xe2, 0x0a, 0x00, 0x61, 0x4a, 0x00, 0x00, 0x00, 0x0f,
		0xec, 0x52, 0xec, 0x01, 0xff, 0x08, 0x19, 0xd5, 0xca, 0x96, 0xc8, 0x42,
		0xb3, 0xe8, 0x75, 0xb6, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x41, 0x00, 0x43, 0x00, 0x72, 0x00,
		0x6f, 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x72, 0x00, 0x44, 0x00,
		0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
		0x2d, 0x00, 0x4e, 0x00, 0x49, 0x00, 0x44, 0x00, 0x34, 0x00, 0x34, 0x00,
		0x35, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x62, 0x4e, 0xef, 0x9e, 0xf2, 0x90, 0x71, 0x08,
		0xf4, 0x67, 0x7e, 0x42, 0x7a, 0x89, 0xee, 0x2e, 0x01, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x8b, 0x91, 0x85, 0xe8, 0xf7, 0x72, 0xd8, 0x01,
		0xaf, 0xd2, 0xa4, 0xbb, 0xe2, 0x24, 0x31, 0x66, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x0e, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x57, 0x00,
		0x49, 0x00, 0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00, 0x43, 0x00, 0x47, 0x00,
		0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x30, 0x00,
		0x38, 0x00, 0x34, 0x00, 0x04, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00,
		0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00,
		0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x03, 0x00,
		0x3a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x2d, 0x00, 0x46, 0x00,
		0x43, 0x00, 0x47, 0x00, 0x55, 0x00, 0x34, 0x00, 0x47, 0x00, 0x48, 0x00,
		0x4f, 0x00, 0x30, 0x00, 0x38, 0x00, 0x34, 0x00, 0x2e, 0x00, 0x43, 0x00,
		0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00,
		0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00, 0x43, 0x00, 0x41, 0x00, 0x4c, 0x00,
		0x05, 0x00, 0x1a, 0x00, 0x43, 0x00, 0x4f, 0x00, 0x4e, 0x00, 0x54, 0x00,
		0x4f, 0x00, 0x53, 0x00, 0x4f, 0x00, 0x2e, 0x00, 0x4c, 0x00, 0x4f, 0x00,
		0x43, 0x00, 0x41, 0x00, 0x4c, 0x00, 0x07, 0x00, 0x08, 0x00, 0x8b, 0x91,
		0x85, 0xe8, 0xf7, 0x72, 0xd8, 0x01, 0x06, 0x00, 0x04, 0x00, 0x02, 0x00,
		0x00, 0x00, 0x08, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x14, 0x1a,
		0x38, 0x76, 0xf8, 0x9c, 0x6e, 0x45, 0xd8, 0x92, 0xf5, 0xb4, 0x0e, 0x64,
		0x2f, 0xe9, 0xca, 0x41, 0x72, 0x52, 0x24, 0xb0, 0xd6, 0x96, 0x37, 0x81,
		0xbf, 0xef, 0xd7, 0x94, 0xf5, 0xe9, 0x0a, 0x00, 0x10, 0x00, 0x34, 0xb4,
		0xc6, 0x93, 0xe6, 0x05, 0xec, 0xf5, 0x37, 0x4d, 0xf9, 0x5a, 0xac, 0xa2,
		0x6b, 0xf3, 0x09, 0x00, 0x3e, 0x00, 0x48, 0x00, 0x54, 0x00, 0x54, 0x00,
		0x50, 0x00, 0x2f, 0x00, 0x73, 0x00, 0x74, 0x00, 0x73, 0x00, 0x2e, 0x00,
		0x63, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x73, 0x00,
		0x6f, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x70, 0x00, 0x6f, 0x00,
		0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6f, 0x00, 0x6e, 0x00,
		0x2e, 0x00, 0x63, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0xeb, 0xdf, 0x0e, 0xc1, 0xf7, 0xde, 0xb8, 0x3c,
		0x1c, 0xfe, 0x69, 0x25, 0xf7, 0x22, 0x16, 0x5a,
	}
)

func TestDecodeNegotiateMessageSampleA(t *testing.T) {
	var err error

	NegotiateMessage, err := DecodeNegotiateMessage(NegotiateMessageBytesSampleA)
	if err != nil {
		t.Errorf("error decoding negotiate message: %v", err)
	}

	spew.Dump(NegotiateMessage)
}

func TestDecodeChallengeMessageSampleA(t *testing.T) {
	var err error

	ChallengeMessage, err := DecodeChallengeMessage(ChallengeMessageBytesSampleA)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(ChallengeMessage)
}

func TestDecodeAuthenticateMessageSampleA(t *testing.T) {
	var err error

	AuthenticateMessage, err := DecodeAuthenticateMessage(AuthenticateMessageBytesSampleA)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(AuthenticateMessage)
}

func TestDecodeNegotiateMessageSampleB(t *testing.T) {
	var err error

	NegotiateMessage, err := DecodeNegotiateMessage(NegotiateMessageBytesSampleB)
	if err != nil {
		t.Errorf("error decoding negotiate message: %v", err)
	}

	spew.Dump(NegotiateMessage)
}

func TestDecodeChallengeMessageSampleB(t *testing.T) {
	var err error

	ChallengeMessage, err := DecodeChallengeMessage(ChallengeMessageBytesSampleB)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(ChallengeMessage)
}

func TestDecodeAuthenticateMessageSampleB(t *testing.T) {
	var err error

	AuthenticateMessage, err := DecodeAuthenticateMessage(AuthenticateMessageBytesSampleB)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(AuthenticateMessage)
}

func TestDecodeNegotiateMessageSampleC(t *testing.T) {
	var err error

	NegotiateMessage, err := DecodeNegotiateMessage(NegotiateMessageBytesSampleC)
	if err != nil {
		t.Errorf("error decoding negotiate message: %v", err)
	}

	spew.Dump(NegotiateMessage)
}

func TestDecodeChallengeMessageSampleC(t *testing.T) {
	var err error

	ChallengeMessage, err := DecodeChallengeMessage(ChallengeMessageBytesSampleC)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(ChallengeMessage)
}

func TestDecodeAuthenticateMessageSampleC(t *testing.T) {
	var err error

	AuthenticateMessage, err := DecodeAuthenticateMessage(AuthenticateMessageBytesSampleC)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(*AuthenticateMessage)
}

func TestDecodeNegotiateMessageSampleD(t *testing.T) {
	var err error

	NegotiateMessage, err := DecodeNegotiateMessage(NegotiateMessageBytesSampleD)
	if err != nil {
		t.Errorf("error decoding negotiate message: %v", err)
	}

	spew.Dump(NegotiateMessage)
}

func TestDecodeChallengeMessageSampleD(t *testing.T) {
	var err error

	ChallengeMessage, err := DecodeChallengeMessage(ChallengeMessageBytesSampleD)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(ChallengeMessage)
}

func TestDecodeAuthenticateMessageSampleD(t *testing.T) {
	var err error

	AuthenticateMessage, err := DecodeAuthenticateMessage(AuthenticateMessageBytesSampleD)
	if err != nil {
		t.Errorf("error decoding challenge message: %v", err)
	}

	spew.Dump(*AuthenticateMessage)
}

func TestFullDecodeSampleA(t *testing.T) {
	decodedNegotiateMessage, err := DecodeMessage(NegotiateMessageBytesSampleA)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedNegotiateMessage.(type) {
	case *NEGOTIATE_MESSAGE:
		spew.Dump(*(decodedNegotiateMessage.(*NEGOTIATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *NEGOTIATE_MESSAGE, got : %T", v)
	}

	decodedChallengeMessage, err := DecodeMessage(ChallengeMessageBytesSampleA)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedChallengeMessage.(type) {
	case *CHALLENGE_MESSAGE:
		spew.Dump(*(decodedChallengeMessage.(*CHALLENGE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *CHALLENGE_MESSAGE, got : %T", v)
	}

	decodedAuthenticateMessage, err := DecodeMessage(AuthenticateMessageBytesSampleA)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedAuthenticateMessage.(type) {
	case *AUTHENTICATE_MESSAGE:
		spew.Dump(*(decodedAuthenticateMessage.(*AUTHENTICATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *AUTHENTICATE_MESSAGE, got : %T", v)
	}
}

func TestFullDecodeSampleB(t *testing.T) {
	decodedNegotiateMessage, err := DecodeMessage(NegotiateMessageBytesSampleB)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedNegotiateMessage.(type) {
	case *NEGOTIATE_MESSAGE:
		spew.Dump(*(decodedNegotiateMessage.(*NEGOTIATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *NEGOTIATE_MESSAGE, got : %T", v)
	}

	decodedChallengeMessage, err := DecodeMessage(ChallengeMessageBytesSampleB)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedChallengeMessage.(type) {
	case *CHALLENGE_MESSAGE:
		spew.Dump(*(decodedChallengeMessage.(*CHALLENGE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *CHALLENGE_MESSAGE, got : %T", v)
	}

	decodedAuthenticateMessage, err := DecodeMessage(AuthenticateMessageBytesSampleB)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedAuthenticateMessage.(type) {
	case *AUTHENTICATE_MESSAGE:
		spew.Dump(*(decodedAuthenticateMessage.(*AUTHENTICATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *AUTHENTICATE_MESSAGE, got : %T", v)
	}
}

func TestFullDecodeSampleC(t *testing.T) {
	decodedNegotiateMessage, err := DecodeMessage(NegotiateMessageBytesSampleC)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedNegotiateMessage.(type) {
	case *NEGOTIATE_MESSAGE:
		spew.Dump(*(decodedNegotiateMessage.(*NEGOTIATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *NEGOTIATE_MESSAGE, got : %T", v)
	}

	decodedChallengeMessage, err := DecodeMessage(ChallengeMessageBytesSampleC)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedChallengeMessage.(type) {
	case *CHALLENGE_MESSAGE:
		spew.Dump(*(decodedChallengeMessage.(*CHALLENGE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *CHALLENGE_MESSAGE, got : %T", v)
	}

	decodedAuthenticateMessage, err := DecodeMessage(AuthenticateMessageBytesSampleC)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedAuthenticateMessage.(type) {
	case *AUTHENTICATE_MESSAGE:
		spew.Dump(*(decodedAuthenticateMessage.(*AUTHENTICATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *AUTHENTICATE_MESSAGE, got : %T", v)
	}
}

func TestFullDecodeSampleD(t *testing.T) {
	decodedNegotiateMessage, err := DecodeMessage(NegotiateMessageBytesSampleD)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedNegotiateMessage.(type) {
	case *NEGOTIATE_MESSAGE:
		spew.Dump(*(decodedNegotiateMessage.(*NEGOTIATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *NEGOTIATE_MESSAGE, got : %T", v)
	}

	decodedChallengeMessage, err := DecodeMessage(ChallengeMessageBytesSampleD)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedChallengeMessage.(type) {
	case *CHALLENGE_MESSAGE:
		spew.Dump(*(decodedChallengeMessage.(*CHALLENGE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *CHALLENGE_MESSAGE, got : %T", v)
	}

	decodedAuthenticateMessage, err := DecodeMessage(AuthenticateMessageBytesSampleD)
	if err != nil {
		t.Errorf("error decoding message: %v", err)
		return
	}

	switch v := decodedAuthenticateMessage.(type) {
	case *AUTHENTICATE_MESSAGE:
		spew.Dump(*(decodedAuthenticateMessage.(*AUTHENTICATE_MESSAGE)))
	default:
		t.Errorf("did not properly identify message as a *AUTHENTICATE_MESSAGE, got : %T", v)
	}
}
